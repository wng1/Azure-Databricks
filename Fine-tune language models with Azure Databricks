https://learn.microsoft.com/en-gb/training/modules/fine-tune-azure-databricks/2-fine-tune-concept


Fine-tuning helps the LLM to improve on accuracy and relevance, as well as performance whilst saving on resources, time compared to training from scratch or beginning.

This boosts the performance in tasks such as sentiment analysis, text generation or understanding specific domain languages.

Fine-tuning lets you create models that fit your specific needs. As a result, your model is more accurate and relevant and you save on computational resources and time.


https://learn.microsoft.com/en-gb/training/modules/fine-tune-azure-databricks/4-how-to-fine-tune



import os
from openai import AzureOpenAI

client = AzureOpenAI(
  azure_endpoint = os.getenv("AZURE_OPENAI_ENDPOINT"),
  api_key = os.getenv("AZURE_OPENAI_API_KEY"),
  api_version = "2024-05-01-preview"
  )

training_file_name = '___________________'
validation_file_name = '____________________'

training_response = client.files.create(
  file = open(training_file_name, "rb"), purpose="fine-tune"
) 
training_file_id = training_response.id

validation_response = client.files.create(
  file = open(validation_file_name, "rb"), purpose="fine-tune"
)
validation_file_id = validation_response.id

print("Training file ID:", training_file_id)
print("Validation file ID:", validation_file_id)

response = client.fine_tuning.jobs.create(
  training_file = training_file_id,
  validation_file = validation_file_id,
  model = "gpt-35-turbo-0613",
  seed = 105
)

job_id = response.id

 print("Job ID:", response.id)
 print("Status:", response.status)



